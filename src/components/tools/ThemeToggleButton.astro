---
// Theme Toggle Button Component
// Provides a circular button to toggle between light and dark themes
---

<button
  type="button"
  aria-label="Toggle dark mode"
  data-tooltip="Toggle dark mode"
  data-side="bottom"
  id="theme-toggle"
  class="theme-toggle-btn"
>
  <!-- Sun icon (shown in dark mode to switch to light) -->
  <span class="theme-icon sun-icon" aria-hidden="true">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="4" />
      <path d="M12 2v2" />
      <path d="M12 20v2" />
      <path d="m4.93 4.93 1.41 1.41" />
      <path d="m17.66 17.66 1.41 1.41" />
      <path d="M2 12h2" />
      <path d="M20 12h2" />
      <path d="m6.34 17.66-1.41 1.41" />
      <path d="m19.07 4.93-1.41 1.41" />
    </svg>
  </span>
  <!-- Moon icon (shown in light mode to switch to dark) -->
  <span class="theme-icon moon-icon" aria-hidden="true">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z" />
    </svg>
  </span>
</button>

<style>
  /* CSS Custom Properties (Variables) */
  .theme-toggle-btn {
    /* Size variables */
    --btn-size: 40px;
    --icon-size: 20px;
    
    /* Glass morphism effects - Light mode */
    --glass-bg: rgba(255, 255, 255, 0.15);
    --glass-border: rgba(255, 255, 255, 0.2);
    --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.1), 0 4px 16px rgba(0, 0, 0, 0.05);
    --glass-hover-bg: rgba(255, 255, 255, 0.25);
    
    /* Icon colors */
    --sun-color: #fbbf24;
    --moon-color: #6366f1;
    
    /* Animation properties */
    --transition-duration: 0.3s;
    --hover-scale: 1.05;
    --blur-effect: blur(8px) saturate(140%);
    
    /* Button styling with glass effect */
    width: var(--btn-size);
    height: var(--btn-size);
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    border-radius: 50%;
    padding: 0;
    
    /* Glass morphism styling */
    background: var(--glass-bg);
    backdrop-filter: var(--blur-effect);
    border: 1px solid var(--glass-border);
    box-shadow: var(--glass-shadow);
    
    cursor: pointer;
    transition: all var(--transition-duration) ease;
    will-change: backdrop-filter, transform, background;
    
    /* Focus and accessibility */
    outline: none;
  }
  
  .theme-toggle-btn:hover {
    background: var(--glass-hover-bg);
    transform: scale(var(--hover-scale));
    box-shadow: 
      0 12px 40px rgba(0, 0, 0, 0.15), 
      0 6px 20px rgba(0, 0, 0, 0.08);
  }
  
  .theme-toggle-btn:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  .theme-toggle-btn:active {
    transform: scale(0.95);
    transition: transform 0.1s ease;
  }
  
  /* Dark theme glass morphism overrides */
  :global(.dark) .theme-toggle-btn {
    --glass-bg: rgba(15, 23, 42, 0.15);
    --glass-border: rgba(255, 255, 255, 0.1);
    --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.3), 0 4px 16px rgba(0, 0, 0, 0.2);
    --glass-hover-bg: rgba(15, 23, 42, 0.25);
  }
  
  :global(.dark) .theme-toggle-btn:hover {
    box-shadow: 
      0 12px 40px rgba(0, 0, 0, 0.4), 
      0 6px 20px rgba(0, 0, 0, 0.25);
  }
  
  /* Icon base styles */
  .theme-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--icon-size);
    height: var(--icon-size);
    transition: all var(--transition-duration) ease;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
  }
  
  .theme-icon svg {
    width: var(--icon-size);
    height: var(--icon-size);
  }
  
  /* Icon visibility control */
  .sun-icon {
    display: none;
    color: var(--sun-color);
  }
  
  .moon-icon {
    display: flex;
    color: var(--moon-color);
  }
  
  /* Dark mode icon visibility */
  :global(.dark) .sun-icon {
    display: flex;
  }
  
  :global(.dark) .moon-icon {
    display: none;
  }
  
  /* Enhanced icon animations */
  .theme-toggle-btn:hover .theme-icon {
    transform: rotate(15deg);
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
  }
  
  /* Smooth icon transition when switching themes */
  .theme-icon {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: scale(0.8) rotate(-15deg);
    }
    to {
      opacity: 1;
      transform: scale(1) rotate(0deg);
    }
  }
</style>

<script>
  // Theme Toggle Button Script
  // Handles theme switching functionality and icon updates
  
  // Constants
  const THEME_TOGGLE_ID = 'theme-toggle';
  const THEME_EVENT_NAME = 'basecoat:theme';
  const DARK_CLASS = 'dark';
  const UPDATE_DELAY = 50; // ms delay for icon updates after theme change
  
  // Selectors
  const SELECTORS = {
    sunIcon: '.sun-icon',
    moonIcon: '.moon-icon',
    themeToggle: `#${THEME_TOGGLE_ID}`
  } as const;
  
  /**
   * Updates the visibility of theme icons based on current theme
   */
  function updateThemeIcons(): void {
    const sunIcon = document.querySelector(SELECTORS.sunIcon) as HTMLElement;
    const moonIcon = document.querySelector(SELECTORS.moonIcon) as HTMLElement;
    
    if (!sunIcon || !moonIcon) {
      console.warn('Theme icons not found');
      return;
    }
    
    const isDarkMode = document.documentElement.classList.contains(DARK_CLASS);
    
    // In dark mode: show sun icon (to switch to light)
    // In light mode: show moon icon (to switch to dark)
    sunIcon.style.display = isDarkMode ? 'flex' : 'none';
    moonIcon.style.display = isDarkMode ? 'none' : 'flex';
    
    console.log(`Theme icons updated - Dark mode: ${isDarkMode}`);
  }
  
  /**
   * Dispatches a custom theme toggle event
   */
  function dispatchThemeToggleEvent(): void {
    const themeEvent = new CustomEvent(THEME_EVENT_NAME, {
      detail: { mode: 'toggle' }
    });
    
    document.dispatchEvent(themeEvent);
    console.log('Theme toggle event dispatched');
  }
  
  /**
   * Handles the theme toggle button click
   */
  function handleThemeToggleClick(event: Event): void {
    event.preventDefault();
    
    const currentIsDark = document.documentElement.classList.contains(DARK_CLASS);
    console.log(`Theme toggle clicked - Current mode: ${currentIsDark ? 'dark' : 'light'}`);
    
    // Dispatch theme change event
    dispatchThemeToggleEvent();
    
    // Update icons after a brief delay to ensure theme change has been applied
    setTimeout(() => {
      updateThemeIcons();
      const newIsDark = document.documentElement.classList.contains(DARK_CLASS);
      console.log(`Theme changed - New mode: ${newIsDark ? 'dark' : 'light'}`);
    }, UPDATE_DELAY);
  }
  
  /**
   * Sets up the theme toggle button event listener
   */
  function initializeThemeToggle(): void {
    const themeToggleButton = document.querySelector(SELECTORS.themeToggle) as HTMLButtonElement;
    
    if (!themeToggleButton) {
      console.error('Theme toggle button not found');
      return;
    }
    
    // Add click event listener
    themeToggleButton.addEventListener('click', handleThemeToggleClick);
    console.log('Theme toggle button initialized');
  }
  
  /**
   * Sets up a MutationObserver to watch for theme class changes
   */
  function setupThemeObserver(): void {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          updateThemeIcons();
        }
      });
    });
    
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
    
    console.log('Theme observer initialized');
  }
  
  /**
   * Main initialization function
   */
  function init(): void {
    console.log('Initializing theme toggle component');
    
    // Update icons based on current theme
    updateThemeIcons();
    
    // Initialize button functionality
    initializeThemeToggle();
    
    // Setup theme change observer
    setupThemeObserver();
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>
